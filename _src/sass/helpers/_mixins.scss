// vendor.scss v1.0 | @ajlkn | MIT licensed */

// Vars.

/// Vendor prefixes.
/// @var {list}
$vendor-prefixes: ('-moz-',
'-webkit-',
'-ms-',
'-o-',
''
);

/// Properties that should be vendorized.
/// Data via caniuse.com, github.com/postcss/autoprefixer, and developer.mozilla.org
/// @var {list}
$vendor-properties: ( // Animation.
'animation',
'animation-delay',
'animation-direction',
'animation-duration',
'animation-fill-mode',
'animation-iteration-count',
'animation-name',
'animation-play-state',
'animation-timing-function',

// Appearance.
'appearance',

// Backdrop filter.
'backdrop-filter',

// Background image options.
'background-clip',
'background-origin',
'background-size',

// Box sizing.
'box-sizing',

// Clip path.
'clip-path',

// Filter effects.
'filter',

// Flexbox.
'align-content',
'align-items',
'align-self',
'flex',
'flex-basis',
'flex-direction',
'flex-flow',
'flex-grow',
'flex-shrink',
'flex-wrap',
'justify-content',
'order',

// Font feature.
'font-feature-settings',
'font-language-override',
'font-variant-ligatures',

// Font kerning.
'font-kerning',

// Fragmented borders and backgrounds.
'box-decoration-break',

// Grid layout.
'grid-column',
'grid-column-align',
'grid-column-end',
'grid-column-start',
'grid-row',
'grid-row-align',
'grid-row-end',
'grid-row-start',
'grid-template-columns',
'grid-template-rows',

// Hyphens.
'hyphens',
'word-break',

// Masks.
'mask',
'mask-border',
'mask-border-outset',
'mask-border-repeat',
'mask-border-slice',
'mask-border-source',
'mask-border-width',
'mask-clip',
'mask-composite',
'mask-image',
'mask-origin',
'mask-position',
'mask-repeat',
'mask-size',

// Multicolumn.
'break-after',
'break-before',
'break-inside',
'column-count',
'column-fill',
'column-gap',
'column-rule',
'column-rule-color',
'column-rule-style',
'column-rule-width',
'column-span',
'column-width',
'columns',

// Object fit.
'object-fit',
'object-position',

// Regions.
'flow-from',
'flow-into',
'region-fragment',

// Scroll snap points.
'scroll-snap-coordinate',
'scroll-snap-destination',
'scroll-snap-points-x',
'scroll-snap-points-y',
'scroll-snap-type',

// Shapes.
'shape-image-threshold',
'shape-margin',
'shape-outside',

// Tab size.
'tab-size',

// Text align last.
'text-align-last',

// Text decoration.
'text-decoration-color',
'text-decoration-line',
'text-decoration-skip',
'text-decoration-style',

// Text emphasis.
'text-emphasis',
'text-emphasis-color',
'text-emphasis-position',
'text-emphasis-style',

// Text size adjust.
'text-size-adjust',

// Text spacing.
'text-spacing',

// Transform.
'transform',
'transform-origin',

// Transform 3D.
'backface-visibility',
'perspective',
'perspective-origin',
'transform-style',

// Transition.
'transition',
'transition-delay',
'transition-duration',
'transition-property',
'transition-timing-function',

// Unicode bidi.
'unicode-bidi',

// User select.
'user-select',

// Writing mode.
'writing-mode',

);

/// Values that should be vendorized.
/// Data via caniuse.com, github.com/postcss/autoprefixer, and developer.mozilla.org
/// @var {list}
$vendor-values: ( // Cross fade.
'cross-fade',

// Element function.
'element',

// Filter function.
'filter',

// Flexbox.
'flex',
'inline-flex',

// Grab cursors.
'grab',
'grabbing',

// Gradients.
'linear-gradient',
'repeating-linear-gradient',
'radial-gradient',
'repeating-radial-gradient',

// Grid layout.
'grid',
'inline-grid',

// Image set.
'image-set',

// Intrinsic width.
'max-content',
'min-content',
'fit-content',
'fill',
'fill-available',
'stretch',

// Sticky position.
'sticky',

// Transform.
'transform',

// Zoom cursors.
'zoom-in',
'zoom-out',

);

/// Wraps @content in vendorized keyframe blocks.
/// @param {string} $name Name.
@mixin keyframes($name) {

  @-moz-keyframes #{$name} {
    @content;
  }

  @-webkit-keyframes #{$name} {
    @content;
  }

  @-ms-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }

}

/// Vendorizes a declaration's property and/or value(s).
/// @param {string} $property Property.
/// @param {mixed} $value String/list of value(s).
@mixin prefix($property, $value) {

  // Determine if property should expand.
  $expandProperty: index($vendor-properties, $property);

  // Determine if value should expand (and if so, add '-prefix-' placeholder).
  $expandValue: false;

  @each $x in $value {
    @each $y in $vendor-values {
      @if $y==str-slice($x, 1, str-length($y)) {

        $value: set-nth($value, index($value, $x), '-prefix-'+ $x);
        $expandValue: true;

      }
    }
  }

  // Expand property?
  @if $expandProperty {
    @each $vendor in $vendor-prefixes {
      #{$vendor}#{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
    }
  }

  // Expand just the value?
  @elseif $expandValue {
    @each $vendor in $vendor-prefixes {
      #{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
    }
  }

  // Neither? Treat them as a normal declaration.
  @else {
    #{$property}: #{$value};
  }

}

/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {

  text-decoration: none;

  &:#{$where} {

    @if $content {
      content: $content;
    }

    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-family: FontAwesome;
    font-style: normal;
    font-weight: normal;
    text-transform: none !important;

  }

}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {

  $svg: str-replace($svg, '"', '\'');
  $svg: str-replace($svg, '%', '%25');
  $svg: str-replace($svg, '<', '%3C');
  $svg: str-replace($svg, '>', '%3E');
  $svg: str-replace($svg, '&', '%26');
  $svg: str-replace($svg, '#', '%23');
  $svg: str-replace($svg, '{', '%7B');
  $svg: str-replace($svg, '}', '%7D');
  $svg: str-replace($svg, ';', '%3B');

  @return url("data:image/svg+xml;charset=utf8,#{$svg}");

}

/// Detect user agent.
/// Requries user agent JS to be active.
@mixin browser($browsers: Mozilla Safari Opera Edge Firefox MSIE Chrome) {
  @each $browser in $browsers {
    html[data-browser*="#{$browser}"] & {
      @content;
    }
  }
}

/// Responsive breakpoints
// @import 'breakpoints';

/// Center Positioning
@mixin position($horizontal: true, $vertical: true, $absolute_center: false){
  position: absolute;
  @if $absolute_center {
    margin: 0 auto;
    text-align: center;
  }
  @if ($horizontal and $vertical) {
    @include prefix(transform, translateY(-50%));
    top: 50%;
    left: 0;
    right: 0;
  } @else if ($horizontal) {
    left: 0;
    right: 0;
  } @else if ($vertical) {
    @include prefix(transform, translateY(-50%));
    top: 50%;
  }
}

/// Flex positioning
@mixin flex($align, $justify, $direction, $wrap: true) {
  align-items: $align;
  display: flex;
  // If space-evenly is used.
  @if $justify == 'space-evenly' {
    // Use fallback for Edge.
    @supports (-ms-ime-align: auto) {
      justify-content: space-between;

      &::before,
      &::after {
        content: '';
        display: block;
      }
    }
    // If not Edge then apply space-evenly.
    @supports not (-ms-ime-align: auto) {
      // Run fallback if Safari.
      @include browser(Safari) {
        justify-content: space-between;

        &::before,
        &::after {
          content: '';
          display: block;
        }
      }
      // Run space-evenly.
      justify-content: space-between;
      justify-content: $justify;
    }
  } @else {
    // If other justify-content used.
    justify-content: $justify;
  }
  @if str-index($direction, 'row') {
    @if $wrap {
      flex-flow: $direction wrap;
    } @else {
      flex-direction: $direction;
      @include media('<=phone') {
        @if $direction == 'row' {
          flex-direction: column;
        } @else if $direction == 'row-reverse' {
          flex-direction: column-reverse;
        }
      }
      flex-wrap: nowrap;
    }
  } @else if str-index($direction, 'column')  {
    flex-direction: $direction;
  }
}

/// Active, Focus and Hover
@mixin call-to-action( $hover: true, $active: true, $focus: true){
  @if $hover and $active and $focus {
    &:hover, &:active, &:focus{
      @content;
    }
  }
  @else if $hover{
    &:hover{
      @content;
    }
  }
  @else if $active{
    &:active{
      @content;
    }
  }
  @else if $focus{
    &:focus{
      @content;
    }
  }
  @else {
    @error "You must have an '#{$hover}' and/or '#{$active}' and/or '#{$focus}'.";
  }
}

/// Background Overlay
@mixin overlay($color: $black, $alpha: 0.3, $zindex: 1){
  &::before{
    content: '';
    @include size(100%);
    background-color: rgba($color,$alpha);
    @include position;
    z-index: 1;
  }
}

/// border-radius
@mixin radius($radius) {
  @include prefix(border-radius, $radius);
}

///box-shadow
@mixin drop-shadow($x: 0px, $y: 0px, $blur: 0px, $alpha: 0.5) {
  @include prefix(box-shadow, $x $y $blur rgba(0, 0, 0, $alpha));
}

/// Borders
@mixin border($border-width: 15, $border-style: solid, $border-color: #e6e6e6) {
  border: #{$border-width}px $border-style $border-color;
}

///css placeholder
@mixin placeholder {
  &::-webkit-input-placeholder { @content; }
  &input::-webkit-input-placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &:-o-input-placeholder { @content; }
  &::placeholder { @content; }
}

/// Apply gradient
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

/// Show the retina images on retina-friendly devices only.
@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}

/// Only display content to screen readers
/// See: https://a11yproject.com/posts/how-to-hide-content/
/// See: https://hugogiraudel.com/2016/10/13/css-hide-and-seek/

@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/// Use in conjunction with .sr-only to only display content when it's focused.
/// Useful for "Skip to main content" links; see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
/// Credit: HTML5 Boilerplate

@mixin sr-only-focusable {
  &:active, &:focus {
    position: static;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
}

/// Scale
@mixin scale($factor) {
  -webkit-transform: scale($factor);
  -moz-transform: 	 scale($factor);
  -ms-transform: 		 scale($factor);
  -o-transform: 		 scale($factor);
}

/// Rotate
@mixin rotate( $deg ){
transform: rotate(#{$deg}deg);
-webkit-transform: rotate(#{$deg}deg);
-moz-transform: rotate(#{$deg}deg);
-o-transform: rotate(#{$deg}deg);
-ms-transform: rotate(#{$deg}deg);
}


/// Transform-origin
@mixin transform-origin($x, $y) {
  -webkit-transform-origin: $x $y;
  -moz-transform-origin:    $x $y;
  -ms-transform-origin:     $x $y;
  -o-transform-origin:      $x $y;
}

/// Transition
@mixin transition($prop: all, $time: 1s, $ease: ease) {
  @include prefix(transition, $prop $time $ease);
}

/// Transition-delay
@mixin transition-delay($time){
  @include prefix(transition-delay, $time);
}

/// Transform
@mixin transform($string){
  @include prefix(transform, $string);
}

/// Effective for when you need to trigger hardware acceleration for some animation.
@mixin hardware($backface: true, $perspective: 1000, $change: auto) {
  @if $backface { backface-visibility: hidden; }
  perspective: $perspective;
  will-change: $change;
}

/// Adding a truncate to an element
@mixin truncate($truncation) {
  max-width: $truncation;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/// Create custom fonts
@mixin fontFace($family, $src, $style: normal, $weight: normal, $display: auto, $text-rendering: null) {
  @font-face {
    font-family: $family;
    font-style: $style;
    font-weight: $weight;
    font-display: $display;
    @if $text-rendering != null {
      text-rendering: $text-rendering;
    }
    @if $family == 'system' {
      src: local('.SFNSText-MediumItalic'), local('.HelveticaNeueDeskInterface-MediumItalicP4'), local('.LucidaGrandeUI'), local('Segoe UI Semibold Italic'), local('Ubuntu Medium Italic'), local('Roboto-MediumItalic'), local('DroidSans-Bold'), local('Tahoma Bold');
    }
    @else {
      src: url('#{$src}.eot'); // IE9 compat
      src: url('#{$src}.eot?#iefix') format('embedded-opentype'), // IE8 and below
      url('#{$src}.woff') format('woff'), // standards
      url('#{$src}.ttf') format('truetype'), // Safari, Android, iOS
      url('#{$src}.svg##{$family}') format('svg'); // legacy iOS
    }
  }
}
