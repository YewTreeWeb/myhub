// Vendor prefixes
@mixin prefix($property, $value, $vendors: webkit moz ms o, $default: true) {
  @if $vendors {
    @each $vendor in $vendors {
      #{"-" + $vendor + "-" + $property}: #{$value};
    }
  }

  @if $default {
    #{$property}: #{$value};
  }
}

/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {

	text-decoration: none;

	&:#{$where} {

		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		font-family: FontAwesome;
		font-style: normal;
		font-weight: normal;
		text-transform: none !important;

	}

}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {

	$svg: str-replace($svg, '"', '\'');
	$svg: str-replace($svg, '%', '%25');
	$svg: str-replace($svg, '<', '%3C');
	$svg: str-replace($svg, '>', '%3E');
	$svg: str-replace($svg, '&', '%26');
	$svg: str-replace($svg, '#', '%23');
	$svg: str-replace($svg, '{', '%7B');
	$svg: str-replace($svg, '}', '%7D');
	$svg: str-replace($svg, ';', '%3B');

	@return url("data:image/svg+xml;charset=utf8,#{$svg}");

}

// Wraps @content in vendorized keyframe blocks.
/// @param {string} $name Name.
@mixin keyframes($name) {

  @-moz-keyframes #{$name} {
    @content;
  }

  @-webkit-keyframes #{$name} {
    @content;
  }

  @-ms-keyframes #{$name} {
    @content;
  }

  @-o-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }

}

// Detect user agent.
@mixin browser($browsers: Mozilla Safari Opera Edge Firefox MSIE Chrome) {
  @each $browser in $browsers {
    html[data-browser*="#{$browser}"] & {
      @content;
    }
  }
}

// Style placeholder elements.
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &input::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &:-o-input-placeholder {
    @content;
  }

  &::placeholder {
    @content;
  }
}

// Create call to action for hover, active and focus.
@mixin call-to-action($hover: true, $active: true, $focus: true) {
  @if $hover and $active and $focus {

    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }

  @else if $hover {
    &:hover {
      @content;
    }
  }

  @else if $active {
    &:active {
      @content;
    }
  }

  @else if $focus {
    &:focus {
      @content;
    }
  }

  @else {
    @error "You must have an '#{$hover}' and/or '#{$active}' and/or '#{$focus}'.";
  }
}

// Create an overlay for element.
@mixin overlay($color: $black, $alpha: 0.3){
  &::before{
    content: '';
    @include size(100%);
    background-color: rgba($color,$alpha);
    @include position;
  }
}

//border-radius
@mixin radius($radius) {
  @include prefix(border-radius, $radius);
}

//box-shadow
@mixin drop-shadow($x: 0px, $y: 0px, $blur: 0px, $alpha: 0.5) {
  @include prefix(box-shadow, $x $y $blur rgba(0, 0, 0, $alpha));
}

//border
@mixin border($border-width, $border-style, $border-color) {
  border-width: $border-width;
  border-style: $border-style;
  border-color: $border-color;
}

// Apply gradient
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation=='vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  }

  @else if $orientation=='horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  }

  @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// Position
@mixin position($horizontal: true, $vertical: true) {
  position: absolute;

  @if ($horizontal and $vertical) {
    @include prefix(transform, translateY(-50%));
    top: 50%;
    left: 0;
	right: 0;
	margin: 0 auto;
  }

  @else if ($horizontal) {
    left: 0;
	right: 0;
	margin: 0 auto;
  }

  @else if ($vertical) {
    @include prefix(transform, translateY(-50%));
	top: 50%;
  }
}

// Flex
@mixin flex($align, $justify, $direction, $wrap: true) {
  display: flex;
  align-items: $align;

  // If space-evenly is used.
  @if $justify=='space-evenly' {

    // Use fallback for Edge.
    @supports (-ms-ime-align: auto) {
      justify-content: space-between;

      &::before,
      &::after {
        content: '';
        display: block;
      }
    }

    // If not Edge then apply space-evenly.
    @supports not (-ms-ime-align: auto) {

      // Run space-evenly.
	  justify-content: space-between;
	  // Run fallback if Safari.
	  @include browser(Safari) {

	    &::before,
	    &::after {
	      content: '';
	      display: block;
	    }
	  }
      justify-content: $justify;
    }
  }

  @else {
    // If other justify-content used.
    justify-content: $justify;
  }

  @if str-index($direction, 'row') {
    @if $wrap {
      flex-flow: $direction wrap;
    }

    @else {
      flex-direction: $direction;

      @include media("<=phone") {
        @if $direction=='row' {
          flex-direction: column;
        }

        @else if $direction=='row-reverse' {
          flex-direction: column-reverse;
        }
      }

      flex-wrap: nowrap;
    }
  }

  @else {
    flex-direction: $direction;
  }
}

// Show the retina images on retina-friendly devices only.
@mixin retina($image, $width, $height) {

  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}

// Only display content to screen readers
//
// See: https://a11yproject.com/posts/how-to-hide-content/
// See: https://hugogiraudel.com/2016/10/13/css-hide-and-seek/

@mixin sr-only {
  position: absolute;
  @include size(1px, 1px);
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Use in conjunction with .sr-only to only display content when it's focused.
//
// Useful for "Skip to main content" links; see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
//
// Credit: HTML5 Boilerplate

@mixin sr-only-focusable {

  &:active,
  &:focus {
    position: static;
    @include size(auto, auto);
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
}

//css scale
@mixin scale($factor) {
  @include prefix(scale, $factor);
}

//css rotate
@mixin rotate($deg) {
  @include prefix(rotate, #{$deg}deg);
}


//css transform-origin
@mixin transform-origin($x, $y) {
  @include prefix(transform-origin, $x, $y);
}

//css transition
@mixin transition($prop: (all), $time: (0.3s), $ease: (ease), $wait: (null)) {
  @if length($prop) > 1 {
    @for $i from 1 through length($prop) {
      $delay: if(nth($wait, $i) !=null, #{nth($wait, $i)}s, '');

      @include prefix(transition, nth($prop, $i) nth($time, $i) nth($ease, $i) $delay);
    }
  } @else {
    @if nth($wait, 1) {
      $delay: #{nth($wait, 1)}s;
    }
    @include prefix(transition, nth($prop, 1) nth($time, 1) nth($ease, 1) $delay);
  }
}

//css transform
@mixin transform($string) {
  @include prefix(transform, $string);
}

// Effective for when you need to trigger hardware acceleration for some animation.
@mixin hardware($backface: true, $perspective: 1000, $change: auto) {
  @if $backface {
    backface-visibility: hidden;
  }

  perspective: $perspective;
  will-change: $change;
}

/**
 * Creates a responsive aspect ratio contianer
 *
 * Accepts:
 * - $width: {integer} Width of item
 * - $height: {integer} Height of item
 * - $element: {string} name of inner element class: ie. .content
 *
 * Usage:
 * .selector {
 *   @include aspect-ratio(16,9, inner_container);
 * }
 */

@mixin aspect-ratio($width, $height, $element: content) {
  position: relative;

  &:before {
    display: block;
    content: " ";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  >.#{$element} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}