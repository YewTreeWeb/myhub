/// Removes a specific item from a list.
/// @author Hugo Giraudel
/// @param {list} $list List.
/// @param {integer} $index Index.
/// @return {list} Updated list.
@function remove-nth($list, $index) {

  $result: null;

  @if type-of($index) !=number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  }

  @else if $index==0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  }

  @else if abs($index)>length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  }

  @else {

    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {

      @if $i !=$index {
        $result: append($result, nth($list, $i));
      }

    }

  }

  @return $result;

}

/// Gets a value from a map.
/// @author Hugo Giraudel
/// @param {map} $map Map.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function val($map, $keys...) {

  @if nth($keys, 1)==null {
    $keys: remove-nth($keys, 1);
  }

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;

}

/// Gets a duration value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _duration($keys...) {
  @return val($duration, $keys...);
}

/// Gets a font value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _font($keys...) {
  @return val($font, $keys...);
}

/// Gets a misc value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _misc($keys...) {
  @return val($misc, $keys...);
}

/// Gets a palette value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _palette($keys...) {
  @return val($palette, $keys...);
}

/// Gets a size value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _size($keys...) {
  @return val($size, $keys...);
}

/// Replaces a substring within another string.
/// @author Hugo Giraudel
/// @param {string} $string String.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {string} Updated string.
@function str-replace($string, $search, $replace: '') {

  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;

}

/// Replaces a substring within each string in a list.
/// @param {list} $strings List of strings.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {list} Updated list of strings.
@function str-replace-all($strings, $search, $replace: '') {

  @each $string in $strings {
    $strings: set-nth($strings, index($strings, $string), str-replace($string, $search, $replace));
  }

  @return $strings;

}

/// Change text colour based on background colour
@function set-text-color($colour) {
  @if (lightness($colour) > 50) {
    @return #000000; // Lighter backgorund, return dark color
  } @else {
    @return #ffffff; // Darker background, return light color
  }
}

/// Typographic units conversion
@function convert($value, $convertUnit, $convertBase: $convertBase) {
  $currentUnit: unit($value);
  $strippedValue: $value / ($value * 0 + 1);

  @if not unitless($convertBase) {
    @if unit($convertBase) !=px {
      @error "Not supported unit '#{unit($convertBase)}' as convert base!";
    }

    $convertBase: $convertBase / ($convertBase * 0 + 1);
  }

  @if $currentUnit==px {
    @if $convertUnit=='em' {
      @return 0em+($strippedValue / $convertBase);
    }

    @else if $convertUnit=='%' {
      @return percentage($strippedValue / $convertBase);
    }
  }

  @else if $currentUnit==em {
    @if $convertUnit=='px' {
      @return 0px+($strippedValue * $convertBase);
    }

    @else if $convertUnit=='%' {
      @return percentage($strippedValue);
    }
  }

  @else if $currentUnit=='%' {
    @if $convertUnit=='px' {
      @return 0em+($strippedValue * $convertBase / 100);
    }

    @else if $convertUnit=='em' {
      @return 0em+($strippedValue / 100);
    }
  }

  // TODO: Check for pt unit convert
  @else if $currentUnit==pt {
    @if $convertUnit=='px' {
      @return 0px+($strippedValue * 1.3333);
    }

    @else if $convertUnit=='em' {
      @return 0em+($strippedValue / 12);
    }

    @else if $convertUnit=='%' {
      @return percentage($strippedValue / 12)
    }
  }

  @error "Can't convert '#{$value}' to unit '#{$convertUnit}'!";
}